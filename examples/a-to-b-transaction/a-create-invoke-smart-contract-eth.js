// Replace the dependency by @quantnetwork/overledger-bundle if you're in your own project
//const OverledgerSDK = require('@quantnetwork/overledger-bundle').default;
// const OverledgerSDK = require('../overledger-sdk-javascript/packages/overledger-bundle/dist').default;
const OverledgerSDK = require('../../packages/overledger-bundle/dist').default;
const Web3 = require('web3');
const FunctionTypes = require('../../packages/overledger-dlt-ethereum/dist/Ethereum').FunctionTypes;
const DataMessageOptions = require('@quantnetwork/overledger-dlt-abstract/dist/AbstractDLT').DataMessageOptions;
const TypeOptions = require('../../packages/overledger-dlt-ethereum/dist/Ethereum').TypeOptions;
const UintIntMOptions = require('../../packages/overledger-dlt-ethereum/dist/Ethereum').UintIntMOptions;
const BytesMOptions = require('../../packages/overledger-dlt-ethereum/dist/Ethereum').BytesMOptions;
const Payable = require('../../packages/overledger-dlt-ethereum/dist/Ethereum').Payable;

//  ---------------------------------------------------------
//  -------------- BEGIN VARIABLES TO UPDATE ----------------
//  ---------------------------------------------------------
const mappId = 'network.quant.software';
const bpiKey = 'bpiKeyTest';

// Paste in your ethereum and ripple private keys.
// For Ethereum you can generate an account using `OverledgerSDK.dlts.ethereum.createAccount` then fund the address at the Ropsten Testnet Faucet.
const partyAEthereumPrivateKey = '0xcbf05d5215b7f37b3cd1577280c45381393116a81c053abbe21afdbd5d0e504d';
const partyAEthereumAddress = '0x0E4e8278ACa5EFEc8430692108B5271961A00ec7'

const partyBEthereumAddress = '0x1a90dbb13861a29bFC2e464549D28bE44846Dbe4';

//EDIT: MAIN DIFFERENCE OF CODE BASE, THIS IS BYTECODE OF CONTRACTS TO CREATE, THEY ARE NOT TO GO IN THE SDK
const thisSolidityByteCode = "608060405234801561001057600080fd5b5060405161023d38038061023d8339818101604052602081101561003357600080fd5b81019080805190602001909291905050508060ff166000816100559190610066565b508060ff16600181905550506100b7565b81548183558181111561008d5781836000526020600020918201910161008c9190610092565b5b505050565b6100b491905b808211156100b0576000816000905550600101610098565b5090565b90565b610177806100c66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063609ff1bd1461003b578063b3f98adc1461005f575b600080fd5b610043610090565b604051808260ff1660ff16815260200191505060405180910390f35b61008e6004803603602081101561007557600080fd5b81019080803560ff169060200190929190505050610102565b005b6000806000905060008090505b6000805490508160ff1610156100fd578160008260ff16815481106100be57fe5b906000526020600020015411156100f05760008160ff16815481106100df57fe5b906000526020600020015491508092505b808060010191505061009d565b505090565b8060ff1660015412156101145761013f565b60008160ff168154811061012457fe5b90600052602060002001600081548092919060010191905055505b5056fea265627a7a723158207c50743b4934c935bd8b283f0b99ffe894d130fc02bbce8eb7d9b75d936685cf64736f6c634300050b0032";
const thisSolidityByteCodeNoConstructor = "0x6080604052600c60015534801561001557600080fd5b506101a6806100256000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063609ff1bd146100465780637c71f8421461006a578063b3f98adc14610088575b600080fd5b61004e6100b9565b604051808260ff1660ff16815260200191505060405180910390f35b61007261012b565b6040518082815260200191505060405180910390f35b6100b76004803603602081101561009e57600080fd5b81019080803560ff169060200190929190505050610131565b005b6000806000905060008090505b6000805490508160ff161015610126578160008260ff16815481106100e757fe5b906000526020600020015411156101195760008160ff168154811061010857fe5b906000526020600020015491508092505b80806001019150506100c6565b505090565b60015481565b8060ff1660015412156101435761016e565b60008160ff168154811061015357fe5b90600052602060002001600081548092919060010191905055505b5056fea265627a7a72315820a6771761a1a94e417c7ad4643b6660f9c4d6da6bf330b848b4c1927ae535561264736f6c634300050b0032";
const smallSolidityConstructorUintInt = "0x608060405234801561001057600080fd5b506040516101233803806101238339818101604052604081101561003357600080fd5b8101908080519060200190929190805190602001909291905050508160008190555080600181905550505060b78061006c6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80635ec7770f146037578063b5197e9b146053575b600080fd5b603d606f565b6040518082815260200191505060405180910390f35b60596078565b6040518082815260200191505060405180910390f35b60008054905090565b600060015490509056fea265627a7a7231582077c7d1bd4913ab11b26a7496b8698213ed45c87c067b99720abdf5546e936ad164736f6c634300050b0032";
const smallSolidityConstructorAddrBool = "0x608060405234801561001057600080fd5b506040516102be3803806102be8339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060146101000a81548160ff0219169083151502179055505050610205806100b96000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633044e5af14610051578063a4ff778d14610081578063af95c2f8146100cb578063e2231a0c146100ed575b600080fd5b61007f6004803603602081101561006757600080fd5b81019080803515159060200190929190505050610131565b005b61008961014e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100d3610177565b604051808215151515815260200191505060405180910390f35b61012f6004803603602081101561010357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061018d565b005b80600060146101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060149054906101000a900460ff16905090565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea265627a7a723158208255b68de44b9f5656901578a2b2bc5c1d1f426448358188e6995b890793a39364736f6c634300050b0032";
const smallSolidityConstructorStringBytes = "0x608060405234801561001057600080fd5b506040516108213803806108218339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186600182028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019080838360005b838110156100ba57808201518184015260208101905061009f565b50505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010a57600080fd5b8382019150602082018581111561012057600080fd5b825186600182028301116401000000008211171561013d57600080fd5b8083526020830192505050908051906020019080838360005b83811015610171578082015181840152602081019050610156565b50505050905090810190601f16801561019e5780820380516001836020036101000a031916815260200191505b5060405250505081600090805190602001906101bb9291906101da565b5080600190805190602001906101d292919061025a565b5050506102ff565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061021b57805160ff1916838001178555610249565b82800160010185558215610249579182015b8281111561024857825182559160200191906001019061022d565b5b50905061025691906102da565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029b57805160ff19168380011785556102c9565b828001600101855582156102c9579182015b828111156102c85782518255916020019190600101906102ad565b5b5090506102d691906102da565b5090565b6102fc91905b808211156102f85760008160009055506001016102e0565b5090565b90565b6105138061030e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309ffcfa31461005157806372967b89146100ca578063a4ff778d14610143578063af95c2f8146101c6575b600080fd5b6100c86004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111640100000000831117156100b857600080fd5b9091929391929390505050610249565b005b610141600480360360208110156100e057600080fd5b81019080803590602001906401000000008111156100fd57600080fd5b82018360208201111561010f57600080fd5b8035906020019184600183028401116401000000008311171561013157600080fd5b909192939192939050505061025f565b005b61014b610275565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018b578082015181840152602081019050610170565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ce610317565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020e5780820151818401526020810190506101f3565b50505050905090810190601f16801561023b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b81816000919061025a9291906103b9565b505050565b818160019190610270929190610439565b505050565b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561030d5780601f106102e25761010080835404028352916020019161030d565b820191906000526020600020905b8154815290600101906020018083116102f057829003601f168201915b5050505050905090565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103af5780601f10610384576101008083540402835291602001916103af565b820191906000526020600020905b81548152906001019060200180831161039257829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103fa57803560ff1916838001178555610428565b82800160010185558215610428579182015b8281111561042757823582559160200191906001019061040c565b5b50905061043591906104b9565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061047a57803560ff19168380011785556104a8565b828001600101855582156104a8579182015b828111156104a757823582559160200191906001019061048c565b5b5090506104b591906104b9565b5090565b6104db91905b808211156104d75760008160009055506001016104bf565b5090565b9056fea265627a7a7231582060c4b726917ff5294e4b6d5a576e5c0eedf67f6aa80b89ed0a7042d065b19c9964736f6c634300050b0032";
const smallSolidityConstructorUint16Int16 = "0x608060405234801561001057600080fd5b5060405161023d38038061023d8339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548161ffff021916908361ffff16021790555080600060026101000a81548161ffff021916908360010b61ffff16021790555050506101a28061009b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632f2c722c14610051578063a4ff778d14610082578063af95c2f8146100a8578063c41cc947146100cc575b600080fd5b6100806004803603602081101561006757600080fd5b81019080803560010b90602001909291905050506100fe565b005b61008a610121565b604051808261ffff1661ffff16815260200191505060405180910390f35b6100b0610138565b604051808260010b60010b815260200191505060405180910390f35b6100fc600480360360208110156100e257600080fd5b81019080803561ffff16906020019092919050505061014e565b005b80600060026101000a81548161ffff021916908360010b61ffff16021790555050565b60008060009054906101000a900461ffff16905090565b60008060029054906101000a900460010b905090565b806000806101000a81548161ffff021916908361ffff1602179055505056fea265627a7a7231582066bd276ca3217ef7e0577184c544b037081dae4d94410bc238b78fc99c64941e64736f6c634300050b0032";
const smallSolidityConstructorBytes16Bytes32 = "0x608060405234801561001057600080fd5b5060405161023c38038061023c8339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055508060018190555050506101ad8061008f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80638551b46814610051578063a4ff778d1461007f578063af95c2f8146100c3578063dd8df841146100e1575b600080fd5b61007d6004803603602081101561006757600080fd5b8101908080359060200190929190505050610122565b005b61008761012c565b60405180826fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6100cb610142565b6040518082815260200191505060405180910390f35b610120600480360360208110156100f757600080fd5b8101908080356fffffffffffffffffffffffffffffffff1916906020019092919050505061014c565b005b8060018190555050565b60008060009054906101000a900460801b905090565b6000600154905090565b806000806101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055505056fea265627a7a723158202e202165761bf9192bad30951f352bfac6b91b641025048a55bd003ad137518a64736f6c634300050b0032";
const smallSolidityConstructorUintArrayIntArray = "0x608060405234801561001057600080fd5b5060405161067b38038061067b8339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a9291906101df565b505050610276565b8280548282559060005260206000209081019282156101ce579160200282015b828111156101cd5782518255916020019190600101906101b2565b5b5090506101db919061022c565b5090565b82805482825590600052602060002090810192821561021b579160200282015b8281111561021a5782518255916020019190600101906101ff565b5b5090506102289190610251565b5090565b61024e91905b8082111561024a576000816000905550600101610232565b5090565b90565b61027391905b8082111561026f576000816000905550600101610257565b5090565b90565b6103f6806102856000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a4ff778d14610051578063af95c2f8146100b0578063cedd9c3b1461010f578063f9f5618214610188575b600080fd5b610059610201565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561009c578082015181840152602081019050610081565b505050509050019250505060405180910390f35b6100b8610259565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100fb5780820151818401526020810190506100e0565b505050509050019250505060405180910390f35b6101866004803603602081101561012557600080fd5b810190808035906020019064010000000081111561014257600080fd5b82018360208201111561015457600080fd5b8035906020019184602083028401116401000000008311171561017657600080fd5b90919293919293905050506102b1565b005b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293905050506102c7565b005b6060600080548060200260200160405190810160405280929190818152602001828054801561024f57602002820191906000526020600020905b81548152602001906001019080831161023b575b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156102a757602002820191906000526020600020905b815481526020019060010190808311610293575b5050505050905090565b8181600091906102c29291906102dd565b505050565b8181600191906102d892919061032a565b505050565b828054828255906000526020600020908101928215610319579160200282015b828111156103185782358255916020019190600101906102fd565b5b5090506103269190610377565b5090565b828054828255906000526020600020908101928215610366579160200282015b8281111561036557823582559160200191906001019061034a565b5b509050610373919061039c565b5090565b61039991905b8082111561039557600081600090555060010161037d565b5090565b90565b6103be91905b808211156103ba5760008160009055506001016103a2565b5090565b9056fea265627a7a723158207431527a419d02b07d8bd2369b0a7e1ebbe53279c05529d558bb722c2ae9261964736f6c634300050b0032";
const smallSolidityConstructorAddressArrayBoolArray = "0x608060405234801561001057600080fd5b5060405161086c38038061086c8339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a92919061021c565b505050610335565b82805482825590600052602060002090810192821561020b579160200282015b8281111561020a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906101b2565b5b50905061021891906102c2565b5090565b82805482825590600052602060002090601f016020900481019282156102b15791602002820160005b8382111561028257835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302610245565b80156102af5782816101000a81549060ff0219169055600101602081600001049283019260010302610282565b505b5090506102be9190610305565b5090565b61030291905b808211156102fe57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016102c8565b5090565b90565b61033291905b8082111561032e57600081816101000a81549060ff02191690555060010161030b565b5090565b90565b610528806103446000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634b422b0914610051578063a4ff778d146100ca578063af95c2f814610129578063d90eb8e014610188575b600080fd5b6100c86004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111640100000000831117156100b857600080fd5b9091929391929390505050610201565b005b6100d2610217565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101155780820151818401526020810190506100fa565b505050509050019250505060405180910390f35b6101316102a5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610174578082015181840152602081019050610159565b505050509050019250505060405180910390f35b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b9091929391929390505050610322565b005b818160019190610212929190610338565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561029b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610251575b5050505050905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561031857602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116102e25790505b5050505050905090565b8181600091906103339291906103e0565b505050565b82805482825590600052602060002090601f016020900481019282156103cf5791602002820160005b838211156103a0578335151583826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302610361565b80156103cd5782816101000a81549060ff02191690556001016020816000010492830192600103026103a0565b505b5090506103dc9190610480565b5090565b82805482825590600052602060002090810192821561046f579160200282015b8281111561046e57823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610400565b5b50905061047c91906104b0565b5090565b6104ad91905b808211156104a957600081816101000a81549060ff021916905550600101610486565b5090565b90565b6104f091905b808211156104ec57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016104b6565b5090565b9056fea265627a7a723158206f891d2936c584138b86781cbc1493566f266b53bc4af89a94f13f07c0b18afe64736f6c634300050b0032";
const smallSolidityConstructorUint16ArrayInt16Array = "0x608060405234801561001057600080fd5b5060405161087a38038061087a8339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a92919061023c565b50505061034b565b82805482825590600052602060002090600f0160109004810192821561022b5791602002820160005b838211156101fb57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026101bb565b80156102295782816101000a81549061ffff02191690556002016020816001010492830192600103026101fb565b505b50905061023891906102e9565b5090565b82805482825590600052602060002090600f016010900481019282156102d85791602002820160005b838211156102a857835183826101000a81548161ffff021916908360010b61ffff1602179055509260200192600201602081600101049283019260010302610265565b80156102d65782816101000a81549061ffff02191690556002016020816001010492830192600103026102a8565b505b5090506102e5919061031a565b5090565b61031791905b8082111561031357600081816101000a81549061ffff0219169055506001016102ef565b5090565b90565b61034891905b8082111561034457600081816101000a81549061ffff021916905550600101610320565b5090565b90565b6105208061035a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063548a2fa414610051578063a4ff778d146100ca578063af95c2f814610129578063ceac9db314610188575b600080fd5b6100c86004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111640100000000831117156100b857600080fd5b9091929391929390505050610201565b005b6100d2610217565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101155780820151818401526020810190506100fa565b505050509050019250505060405180910390f35b610131610297565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610174578082015181840152602081019050610159565b505050509050019250505060405180910390f35b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b9091929391929390505050610315565b005b81816000919061021292919061032b565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561028d57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116102545790505b5050505050905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561030b57602002820191906000526020600020906000905b82829054906101000a900460010b60010b815260200190600201906020826001010492830192600103820291508084116102d45790505b5050505050905090565b8181600191906103269291906103d9565b505050565b82805482825590600052602060002090600f016010900481019282156103c85791602002820160005b8382111561039857833561ffff1683826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610354565b80156103c65782816101000a81549061ffff0219169055600201602081600101049283019260010302610398565b505b5090506103d59190610489565b5090565b82805482825590600052602060002090600f016010900481019282156104785791602002820160005b8382111561044857833560010b83826101000a81548161ffff021916908360010b61ffff1602179055509260200192600201602081600101049283019260010302610402565b80156104765782816101000a81549061ffff0219169055600201602081600101049283019260010302610448565b505b50905061048591906104ba565b5090565b6104b791905b808211156104b357600081816101000a81549061ffff02191690555060010161048f565b5090565b90565b6104e891905b808211156104e457600081816101000a81549061ffff0219169055506001016104c0565b5090565b9056fea265627a7a72315820e079070a1800419d6b781fae5fc7743b4afb8e3be391dc4a5ee3de3de44d8bce64736f6c634300050b0032";
const smallSolidityConstructorBytes16ArrayBytes32Array = "0x608060405234801561001057600080fd5b506040516107e83803806107e88339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a929190610257565b505050610308565b828054828255906000526020600020906001016002900481019282156102465791602002820160005b8382111561020857835183826101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055509260200192601001602081600f010492830192600103026101bb565b80156102445782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f01049283019260010302610208565b505b50905061025391906102a4565b5090565b828054828255906000526020600020908101928215610293579160200282015b82811115610292578251825591602001919060010190610277565b5b5090506102a091906102e3565b5090565b6102e091905b808211156102dc57600081816101000a8154906fffffffffffffffffffffffffffffffff0219169055506001016102aa565b5090565b90565b61030591905b808211156103015760008160009055506001016102e9565b5090565b90565b6104d1806103176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806303613ff114610051578063a4ff778d146100ca578063af95c2f814610129578063f18c472a14610188575b600080fd5b6100c86004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111640100000000831117156100b857600080fd5b9091929391929390505050610201565b005b6100d2610217565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101155780820151818401526020810190506100fa565b505050509050019250505060405180910390f35b6101316102a5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610174578082015181840152602081019050610159565b505050509050019250505060405180910390f35b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293905050506102fd565b005b818160019190610212929190610313565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561029b57602002820191906000526020600020906000905b82829054906101000a900460801b6fffffffffffffffffffffffffffffffff191681526020019060100190602082600f010492830192600103820291508084116102545790505b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156102f357602002820191906000526020600020905b8154815260200190600101908083116102df575b5050505050905090565b81816000919061030e929190610360565b505050565b82805482825590600052602060002090810192821561034f579160200282015b8281111561034e578235825591602001919060010190610333565b5b50905061035c9190610438565b5090565b828054828255906000526020600020906001016002900481019282156104275791602002820160005b838211156103e95783356fffffffffffffffffffffffffffffffff191683826101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055509260200192601001602081600f01049283019260010302610389565b80156104255782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f010492830192600103026103e9565b505b509050610434919061045d565b5090565b61045a91905b8082111561045657600081600090555060010161043e565b5090565b90565b61049991905b8082111561049557600081816101000a8154906fffffffffffffffffffffffffffffffff021916905550600101610463565b5090565b9056fea265627a7a7231582094fabce49690d90d4d68ec17db7f81498925a86c02fac1f6de25204d5ea800b864736f6c634300050b0032";

//  ---------------------------------------------------------
//  -------------- END VARIABLES TO UPDATE ------------------
//  ---------------------------------------------------------

//EDIT:
const web3 = new Web3(
  //this cannot go into our production, we need to find another web3 source to encode the parameters (I think we imported the web3 package)
  new Web3.providers.HttpProvider('https://ropsten.infura.io/')
);

; (async () => {
  try {
    const overledger = new OverledgerSDK(mappId, bpiKey, {
      dlts: [{ dlt: 'ethereum' }],
      provider: { network: 'testnet' },
    });

    const transactionMessage = 'Overledger JavaScript SDK Test';

    // SET partyA accounts for signing;
    overledger.dlts.ethereum.setAccount(partyAEthereumPrivateKey);

    // Get the address sequences.
    const ethereumSequenceRequest = await overledger.dlts.ethereum.getSequence(partyAEthereumAddress);
    const ethereumAccountSequence = ethereumSequenceRequest.data.dltData[0].sequence;

    console.error('ethereumAccountSequence:' + ethereumAccountSequence);

    //EDIT THIS ENCODING METHOD IS TO GO INTO THE SDK
    //BUT WE NEED TO CREATE PROPERITIES IN THE TRANSACTION OPTIONS OF ETHEREUM TO MAKE THIS USER FRIENDLY
    //prepare real with constructor parameters
    let hexParamsAddressBool = web3.eth.abi.encodeParameters(['address', 'bool'], ['0x236Ee9aE9d5dC66d39Db4f0395Fd868ed4a83E11', true]); //we should do some valid address checking??
    let hexParamsStringBytes = web3.eth.abi.encodeParameters(['string', 'bytes'], ['my new string', '0x6d79206e657720737472696e67']); //we should do some valid string + bytes checking -> check they are in hex format?
    let MforUintInt = '16';
    if (!((parseInt(MforUintInt) % 8 == 0) && (MforUintInt >= 8) && (MforUintInt <= 256))) {
      throw "M not valid";
    }
    let hexParametersUintMIntM = web3.eth.abi.encodeParameters(['uint' + MforUintInt, 'int' + MforUintInt], ['7234', '2459']); //uints and ints added by user need to be checked against their max value
    //we need to support all bytes of size s, where 1 < s <= 32, we can do this by running an if check similar to above
    //but for the following I will just just code 2 explict byte
    let hexParametersBytes16Bytes32 = web3.eth.abi.encodeParameters(['bytes16', 'bytes32'], ['0x6d79206e657720737472696e67', '0x4d79207365636f6e64206e657720737472696e67206f6b']);
    //moving onto array tests
    let hexParamsAddressArrayBoolArray = web3.eth.abi.encodeParameters(['address[]', 'bool[]'], [['0x236Ee9aE9d5dC66d39Db4f0395Fd868ed4a83E11', '0xd55fC08CC6fc3C744Aea53426dFadD45b4755220'], [true, false, true]]);
    let hexParametersUintMArrayIntMArray = web3.eth.abi.encodeParameters(['uint' + MforUintInt + '[]', 'int' + MforUintInt + '[]'], [['7234', '12', '60535'], ['3', '2459']]); //uints and ints added by user need to be checked against their max value
    //let hexParametersBytes16ArrayBytes32Array = web3.eth.abi.encodeParameters(['bytes16[]','bytes32[]'],[['0x6d79206e657720737472696e67','0x737472696e6732'],['0x4d79207365636f6e64206e657720737472696e67206f6b','0xe3f5a2']]);
    //console.log('hexParameters: ' + hexParametersBytes16ArrayBytes32Array);
    //console.log('hexParameters slice: ' + hexParametersBytes16ArrayBytes32Array.slice(2)); 
    //hexData = smallSolidityConstructorBytes16ArrayBytes32Array + hexParametersBytes16ArrayBytes32Array.slice(2); //slice 2 to get rid of 0x hex indicator that is already placed at the beginning of the contract code

    //if ascii, whatever is written in message goes up as ascii characters
    //if contractCreation message must be hex string for contract byte code -> we may change this later to allow different smart contracts to be created through OVL
    //any parameters of the constructor need to also be given, in the functionDetails section
    //if contractInvocation message must be function name and options should include function parameters (but remember there may no be function parameters) -> we will need to test setters and getters!!


    //Different issues:
    //(1) Deploy smart contract without constructor parameters -> done in my Ethereum.ts file
    //(2) Deploy smart contract with constructor parameters -> done with the code above -> examples with all parameters
    //(3) Invoke smart contract function with or without parameters -> done with code above -> not all parameters so far, consider removal of uint, int, uint[], int[] from typeOptions
    //(4) Call smart contract view/pure function with or without parameters -> done in app.get('/getVote) https://github.com/Luker501/WebsiteNodejsBlockchain/blob/master/WithRopstenTestNet/server.js

    let jsonInterfaceSetAddress = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //type: "function" or "constructor" //this is optional default is function
      payable: true, //if the function takes in ether -> i.e. if amount option is > 0, this must be true
      inputs: [{
        type: 'address',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };
    let jsonInterfaceSetBool = {
      name: 'setVariable2', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'bool',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };
    let jsonInterfaceSetUintArray = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'uint256[]', //cannot use int[] in here!!
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetString = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'string',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    ///To test:
    let jsonInterfaceSetUintM = {
      name: 'setVariable2', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'string',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetIntM = {
      name: 'setVariable2', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'string',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetBytes = {
      name: 'setVariable2', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'string',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetBytesM = {
      name: 'setVariable2', //name needs to match a function inside the contract interface
      //i don't think the function variable is required
      inputs: [{
        type: 'string',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetAddressArray = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //type: "function" or "constructor" //this is optional default is function
      //payable: true/false if the function takes in ether -> i.e. if amount option is > 0, this must be true
      inputs: [{
        type: 'address',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetBytesMArray = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //type: "function" or "constructor" //this is optional default is function
      //payable: true/false if the function takes in ether -> i.e. if amount option is > 0, this must be true
      inputs: [{
        type: 'address',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetBoolMArray = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //type: "function" or "constructor" //this is optional default is function
      //payable: true/false if the function takes in ether -> i.e. if amount option is > 0, this must be true
      inputs: [{
        type: 'address',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceSetIntMArray = {
      name: 'setVariable1', //name needs to match a function inside the contract interface
      //type: "function" or "constructor" //this is optional default is function
      //payable: true/false if the function takes in ether -> i.e. if amount option is > 0, this must be true
      inputs: [{
        type: 'address',
        name: 'anyName' //this is a useless variable but it is required to be in or it throws an error
      }]
    };

    let jsonInterfaceConstructAddressBool = { //CONSTRUCTOR DOES NOT SEEM TO WORK FOR SOME REASON????
      //name: 'setVariable1', //name needs to match a function inside the contract interface
      type: 'constructor',// or "constructor" //this is optional default is function
      //i don't think the function variable is required
      inputs: [{
        type: 'address',
        name: 'anyAddress' //this is a useless variable but it is required to be in or it throws an error
      }, {
        type: 'bool',
        name: 'anyBool' //this is a useless variable but it is required to be in or it throws an error
      }]
    };



    let contractSetAddressBool = '0x301A99BE619b23B2fC941cD1F4b1A9C9e5F51Bee'; //this is for address/bool
    let contractSetUintArrayIntArray = '0xd55fC08CC6fc3C744Aea53426dFadD45b4755220'; //this is for uint[]/int[]
    let comtractSetAddressArrayBoolArray = '0x15498007f52421c33DF58FA04EE9f763dd2E8aCa';
    let contractSetStringBytes = '0xe364CA952622cf4C440f172d075a8F34700e17c9';
    let contractSetUintInt = '0xF1D976a95047E6F4b1de529645Fc5209aAD3775F';
    let contractSetBytes16ArrayBytes32Array = '0x08722482466bc44D9750Fa68C2Adf62F86E936Ec';
    let uints = ['5', '14809', '865', '6549'];
    let hexDataSetAddress = web3.eth.abi.encodeFunctionCall(jsonInterfaceSetAddress, [contractSetAddressBool]);
    let hexDataSetBool = web3.eth.abi.encodeFunctionCall(jsonInterfaceSetBool, [false]);
    let hexDataSetUintArray = web3.eth.abi.encodeFunctionCall(jsonInterfaceSetUintArray, [uints]);
    let hexDataSetString = web3.eth.abi.encodeFunctionCall(jsonInterfaceSetString, ["encodeFunctionCall"]);
    // let hexDataConstructorAddressBool = web3.eth.abi.encodeFunctionCall(jsonInterfaceConstructAddressBool,['0xd55fC08CC6fc3C744Aea53426dFadD45b4755220',true]); DOES NOT SEEM TO WORK -> REGENERATED BYTES SEEM TO BE SLIGHTLY OFF SEE: https://ropsten.etherscan.io/address/0x1cddc866ba809073a450349f11f4d6f1f6eb0bff
    console.log("hexData: " + hexDataSetString);

    // Sign the transactions.
    const signedTransactions = await overledger.sign([
      {
        // In order to prepare an ethereum transaction offline, we have to specify the sequence (nonce), a feePrice (gasPrice) and feeLimit (gasLimit).
        dlt: 'ethereum',
        // toAddress: contractSetUintArrayIntArray, //THIS MUST BE EMPTY FOR CONTRACT CREATION AND PRESENT FOR THE OTHER TWO
        toAddress: "0x31E5540F5FDA4AD0E815977c6ddDa7d25c535553", // metamask
        dataMessageType: DataMessageOptions.smartContractInvocation,
        // message: "0x608060405234801561001057600080fd5b5060405161067b38038061067b8339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a9291906101df565b505050610276565b8280548282559060005260206000209081019282156101ce579160200282015b828111156101cd5782518255916020019190600101906101b2565b5b5090506101db919061022c565b5090565b82805482825590600052602060002090810192821561021b579160200282015b8281111561021a5782518255916020019190600101906101ff565b5b5090506102289190610251565b5090565b61024e91905b8082111561024a576000816000905550600101610232565b5090565b90565b61027391905b8082111561026f576000816000905550600101610257565b5090565b90565b6103f6806102856000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a4ff778d14610051578063af95c2f8146100b0578063cedd9c3b1461010f578063f9f5618214610188575b600080fd5b610059610201565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561009c578082015181840152602081019050610081565b505050509050019250505060405180910390f35b6100b8610259565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100fb5780820151818401526020810190506100e0565b505050509050019250505060405180910390f35b6101866004803603602081101561012557600080fd5b810190808035906020019064010000000081111561014257600080fd5b82018360208201111561015457600080fd5b8035906020019184602083028401116401000000008311171561017657600080fd5b90919293919293905050506102b1565b005b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293905050506102c7565b005b6060600080548060200260200160405190810160405280929190818152602001828054801561024f57602002820191906000526020600020905b81548152602001906001019080831161023b575b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156102a757602002820191906000526020600020905b815481526020019060010190808311610293575b5050505050905090565b8181600091906102c29291906102dd565b505050565b8181600191906102d892919061032a565b505050565b828054828255906000526020600020908101928215610319579160200282015b828111156103185782358255916020019190600101906102fd565b5b5090506103269190610377565b5090565b828054828255906000526020600020908101928215610366579160200282015b8281111561036557823582559160200191906001019061034a565b5b509050610373919061039c565b5090565b61039991905b8082111561039557600081600090555060010161037d565b5090565b90565b6103be91905b808211156103ba5760008160009055506001016103a2565b5090565b9056fea265627a7a72315820a6ac0aee3fc4c47591615afd8e094773074ac05bbbf625e0deb6c9be358c2e3964736f6c634300050b0032",
        // message: smallSolidityConstructorUintArrayIntArray,
        message: "0x608060405234801561001057600080fd5b506040516107e83803806107e88339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805160405193929190846401000000008211156100e657600080fd5b838201915060208201858111156100fc57600080fd5b825186602082028301116401000000008211171561011957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610150578082015181840152602081019050610135565b505050509050016040525050508160009080519060200190610173929190610192565b50806001908051906020019061018a929190610257565b505050610308565b828054828255906000526020600020906001016002900481019282156102465791602002820160005b8382111561020857835183826101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055509260200192601001602081600f010492830192600103026101bb565b80156102445782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f01049283019260010302610208565b505b50905061025391906102a4565b5090565b828054828255906000526020600020908101928215610293579160200282015b82811115610292578251825591602001919060010190610277565b5b5090506102a091906102e3565b5090565b6102e091905b808211156102dc57600081816101000a8154906fffffffffffffffffffffffffffffffff0219169055506001016102aa565b5090565b90565b61030591905b808211156103015760008160009055506001016102e9565b5090565b90565b6104d1806103176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806303613ff114610051578063a4ff778d146100ca578063af95c2f814610129578063f18c472a14610188575b600080fd5b6100c86004803603602081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111640100000000831117156100b857600080fd5b9091929391929390505050610201565b005b6100d2610217565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101155780820151818401526020810190506100fa565b505050509050019250505060405180910390f35b6101316102a5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610174578082015181840152602081019050610159565b505050509050019250505060405180910390f35b6101ff6004803603602081101561019e57600080fd5b81019080803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293905050506102fd565b005b818160019190610212929190610313565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561029b57602002820191906000526020600020906000905b82829054906101000a900460801b6fffffffffffffffffffffffffffffffff191681526020019060100190602082600f010492830192600103820291508084116102545790505b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156102f357602002820191906000526020600020905b8154815260200190600101908083116102df575b5050505050905090565b81816000919061030e929190610360565b505050565b82805482825590600052602060002090810192821561034f579160200282015b8281111561034e578235825591602001919060010190610333565b5b50905061035c9190610438565b5090565b828054828255906000526020600020906001016002900481019282156104275791602002820160005b838211156103e95783356fffffffffffffffffffffffffffffffff191683826101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055509260200192601001602081600f01049283019260010302610389565b80156104255782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f010492830192600103026103e9565b505b509050610434919061045d565b5090565b61045a91905b8082111561045657600081600090555060010161043e565b5090565b90565b61049991905b8082111561049557600081816101000a8154906fffffffffffffffffffffffffffffffff021916905550600101610463565b5090565b9056fea265627a7a72315820e68add67af7576f875367e3056f32d5ba3eef2c0dde178adcead15cf628672ef64736f6c634300050b0032",
        options: {
          amount: '0', // must be an integer >= 0
          sequence: ethereumAccountSequence, // must be an integer >= 0
          feePrice: '8000000000', // must be an integer
          feeLimit: '600000', // must be an integer
          functionDetails: { //if contractCreation or contractInvocation is used this is necessary 
            functionType: FunctionTypes.functionCall,
            functionName: 'setVariable2', //necesary only if functionType (line above) is function
            payable: Payable.notPayable, //default is false
            functionParameters:  //Both contract creation and invocation use function parameters
              [
                /*{  
                type: TypeOptions.uintMArray,
                uintIntMValue: UintIntMOptions.m256,
                name: 'testUintArray',
                value: ['8'],
                },
                {  
                  type: TypeOptions.intMArray,
                  uintIntMValue: UintIntMOptions.m256,
                  name: 'newIntArray',
                  value: ['5'],
                  }
                  {
                    type: TypeOptions.uintMArray,
                    uintIntMValue: UintIntMOptions.m256,
                    name: 'newUintArray',
                    value: ['346','464','8']
                  }*/
                  /*{  
                    type: TypeOptions.bytesMArray,
                    bytesMValue: BytesMOptions.m16,
                    name: 'testuintArray',
                    value: [],
                    },*/
                    {  
                      type: TypeOptions.bytesMArray,
                      bytesMValue: BytesMOptions.m32,
                      name: 'newIntArray',
                      value: ['0xdf3234', '0xfdfd'],
                      }

              ]
          }
        },
      },
    ]);

    // Send the transactions to Overledger.
    const result = (await overledger.send(signedTransactions)).data;

    // Log the result.
    console.log(JSON.stringify(result, null, 2));

  } catch (e) {
    console.error('error:', e);
  }
})();

